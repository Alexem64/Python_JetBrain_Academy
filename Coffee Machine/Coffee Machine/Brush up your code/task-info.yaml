type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here
    current_state = [400, 540, 120, 9, 550]
    calcs = [[250, 0, 16, 1, -4], [350, 75, 20, 1, -7], [200, 100, 12, 1, -6]]

    actions = ["buy", "fill", "take", "remaining", "exit"]


    def print_state():
        print("The coffee machine has:")
        print(current_state[0], "of water")
        print(current_state[1], "of milk")
        print(current_state[2], "of coffee beans")
        print(current_state[3], "of disposable cups")
        print("$" + str(current_state[4]) + " of money")

    action = input("Write action (buy, fill, take, remaining, exit):")

    while action != actions[4]:

        if action == actions[0]:
            chosen_coffee = (input("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:"))
            if chosen_coffee == "back":
                action = input("Write action (buy, fill, take, remaining, exit):")
                continue
            if current_state[0] - calcs[int(chosen_coffee) - 1][0] < 0:
                print("Sorry, not enough water!")
                action = input("Write action (buy, fill, take, remaining, exit):")
                continue
            elif current_state[1] - calcs[int(chosen_coffee) - 1][1] < 0:
                print("Sorry, not enough milk")
                action = input("Write action (buy, fill, take, remaining, exit):")
                continue
            elif current_state[2] - calcs[int(chosen_coffee) - 1][2] < 0:
                print("Sorry, not enough coffee beans")
                action = input("Write action (buy, fill, take, remaining, exit):")
                continue
            elif current_state[3] - calcs[int(chosen_coffee) - 1][3] < 0:
                print("Sorry, not enough coffee beans")
                action = input("Write action (buy, fill, take, remaining, exit):")
                continue

            current_state = [current_state[0] - calcs[int(chosen_coffee) - 1][0], current_state[1] - calcs[int(chosen_coffee) - 1][1],
                             current_state[2] - calcs[int(chosen_coffee) - 1][2], current_state[3] - calcs[int(chosen_coffee) - 1][3],
                             current_state[4] - calcs[int(chosen_coffee) - 1][4]]
            print("I have enough resources, making you a coffee!")
            action = input("Write action (buy, fill, take, remaining, exit):")

        elif action == actions[1]:

            add_water = int(input("Write how many ml of water do you want to add:"))
            add_milk = int(input("Write how many ml of milk do you want to add:"))
            add_beans = int(input("Write how many grams of coffee beans do you want to add:"))
            add_cups = int(input("Write how many disposable cups of coffee do you want to add:"))
            current_state = [current_state[0] + add_water, current_state[1] + add_milk, current_state[2] + add_beans,
                             current_state[3] + add_cups, current_state[4]]
            action = input("Write action (buy, fill, take, remaining, exit):")

        elif action == actions[2]:
            print("I gave you $" + str(current_state[4]))
            current_state = [current_state[0], current_state[1], current_state[2], current_state[3], 0]
            action = input("Write action (buy, fill, take, remaining, exit):")

        elif action == actions[3]:
            print_state()
            action = input("Write action (buy, fill, take, remaining, exit):")
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: 6
